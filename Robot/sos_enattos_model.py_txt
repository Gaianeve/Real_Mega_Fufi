"""Empiric acceleration spectrum in Sos Enattos.

"""
# import numerical analysis, graphics and statistics modules
import numpy as np
import scipy
from scipy import io, integrate, linalg, signal
from scipy.sparse.linalg import eigs
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import scipy.optimize as opt
from scipy.stats import norm
from numpy.random import default_rng
import csv as csv

plt.rc( 'font', size=12 )
# Clean up of old figures
plt.close( 'all' )


plt.rc( 'font', size=12 )
# Clean up of old figures
plt.close( 'all' )

# frequency intervals
f_0 = [4.e-3, 2.5e-2, 2.0e-1, 5.e-1, 3.0] # from vertical acceleration
f_1 = [2.5e-2, 2.0e-1, 5.e-1, 3.0, 10.0]
# f_0 = [4.e-3, 3.e-2, 2.9e-1, 3.e-1, 4.0]
# f_1 = [3.e-2, 2.9e-1, 3.e-1, 4.0, 20.0]

a_0 = [1.e-9, 1.e-9, 4.e-7, 4.e-7, 15.e-9] # from vertical acceleration
a_1 = [1.e-9, 4.e-7, 4.e-7, 15.e-9, 3.e-8]

# a_0 = [2.e-9, 2.e-9, 16.e-7, 16.e-7, 8.e-9]
# a_1 = [2.e-9, 16.e-7, 16.e-7, 8.e-9, 2.e-8]

def plaw(f, f0, f1, a0, a1):
    """Compute power law function in the interval [f0, f1].

    f0:     lower end of frequency band
    f1:     higher end of frequency band
    a0:     function value at f0
    a1:     function value at f1

    returns

    n:      ln(a1/a0) / ln(f1/f0) power law index
    a:      a0 * (f/f0)**n
    """

    n = np.log(a1/a0) / np.log(f1/f0)
    a = a0 * (f/f0)**n
    return a, n


# frequency band

freq = np.logspace(np.log10(f_0[0]), np.log10(f_1[-1]), 1000, endpoint=False)

a = []
# loop on frequency
for f in freq:
    # find band
    if f_0[0] > f or f > f_1[-1]:
        print('Frequency {} Hz out of range'.format(f))
    else:
        for iband in range(len(f_0)):
            if f_0[iband] <= f and f <= f_1[iband]:
                a.append(plaw(f, f_0[iband], f_1[iband], a_0[iband], a_1[iband]))
a = np.array(a)
a = a[:,0]
v = a / (2.* np.pi * freq)
x = v / (2.* np.pi * freq)

# cumulated RMS
df = np.diff(freq)
varaa = np.cumsum(np.flip(df * a[:-1]**2))
varvv = np.cumsum(np.flip(df * v[:-1]**2))
varxx = np.cumsum(np.flip(df * x[:-1]**2))

fig1, axs1 = plt.subplots()
fig1.suptitle('Seism acceleration model')
axs1.loglog(freq, a, 'blue', linewidth=3)
# axs1.loglog(freq[0:-1], np.flip(np.sqrt(varaa)), 'orange')
axs1.set_xlim([0.004, 10.])
axs1.set_ylim([1.e-10, 1.e-4])
axs1.set_xlabel('Frequency')
axs1.set_ylabel('$a$'+' ms'+'$^{-2}$' +' Hz'+'$^{-1/2}$') #  ms$^{-2} \\sqrt{{\\mathrm Hz}}
axs1.grid(True, which= 'both')

fig2, axs2 = plt.subplots()
fig2.suptitle('Seism velocity model')
axs2.loglog(freq, v, linewidth=3)
# axs2.loglog(freq[0:-1], np.flip(np.sqrt(varvv)))
axs2.set_xlim([1.e-2, 2.e1])
axs2.set_ylim([1.e-11, 1.e-5])
axs2.set_xlabel('Frequency')
axs2.set_ylabel('$v$'+' ms'+'$^{-1}$' +' Hz'+'$^{-1/2}$') #  ms$^{-2} \\sqrt{{\\mathrm Hz}}
axs2.grid(True, which= 'both')

fig3, axs3 = plt.subplots()
fig3.suptitle('Seism displacement model')
axs3.loglog(freq, x)
axs3.loglog(freq[0:-1], np.flip(np.sqrt(varxx)))
axs3.set_xlim([0.005, 10.])
axs3.set_ylim([1.e-12, 1.e-5])
axs3.set_xlabel('Frequency')
axs3.set_ylabel('$x$'+' m' +' Hz'+'$^{-1/2}$') #  ms$^{-2} \\sqrt{{\\mathrm Hz}}
axs3.grid(True, which= 'both')

virgotoo = True
if virgotoo:
        datafilename = 'ENV_NEB_SEIS_V__FFT.txt'

        datav = np.loadtxt(datafilename)
        v = datav[:2000,1]
        freq = datav[:2000,0]

        x = v / (2.* np.pi * freq)

        # cumulated RMS
        df = np.diff(freq)
        varxx = np.cumsum(np.flip(df * x[:-1]**2))

        fig4, axs4 = plt.subplots()
        fig4.suptitle('Virgo seism velocity measurement')
        axs4.loglog(freq, v)
        # axs4.loglog(freq[0:-1], np.flip(np.sqrt(varvv)))
        #axs4.set_xlim([1.e-2, 2.e1])
        #axs4.set_ylim([1.e-11, 1.e-5])
        axs4.set_xlabel('Frequency')
        axs4.set_ylabel('$v$'+' ms'+'$^{-1}$' +' Hz'+'$^{-1/2}$') #  ms$^{-2} \\sqrt{{\\mathrm Hz}}
        axs4.grid(True, which= 'both')

        # fig1, axs1 = plt.subplots()
        # fig1.suptitle('Virgo NE vertical $\\mu$seismic displacement')
        axs3.loglog(freq, x)
        axs3.loglog(freq[0:-1], np.flip(np.sqrt(varxx)))
        # axs1.set_xlim([0.005, 10.])
        # axs1.set_ylim([1.e-12, 1.e-5])
        # axs1.set_xlabel('Frequency Hz')
        # axs1.set_ylabel('$x$'+' m' +' Hz'+'$^{-1/2}$') #  ms$^{-2} \\sqrt{{\\mathrm Hz}}
        # axs1.grid(True, which= 'both')
        axs3.legend(['x_SOE', 'rms_SOE', 'x_Virgo', 'rms_Virgo'])


plt.show()